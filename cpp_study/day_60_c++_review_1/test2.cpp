//适配器 又叫配接器 是一种设计模式
//stack queue 默认是对deque的封装转化而来 当然也可以使用
//priority_queue 默认是对vector的封装转化而来，不过是在vector上面使用了堆算法

//仿函数
#include <iostream>
using namespace std;
//仿函数一般配合算法,作用就是:提高算法的灵活性

//使用场景 比如 priority_queue，可以用仿函数控制优先级
//map/set,可以使用仿函数控制key的比较方式
//unordered_map和unordered_set,可以使用仿函数控制key转化成整形，取模映射
//sort，可以使用仿函数控制数据的比较大小的方式，控制升序还是降序
//仿函数能做的一些事，函数指针可以，lambda表达式也可以(lambda底层就是仿函数)
//容器的底层实现由结构实现
//空间配置器 ：（内存池）
//容器需要大量内存 -> 操作系统 -> 申请内存 -> 释放内存

//池化技术：线程池，连接池
//线程池：提前创建好一些线程，放在池子里面，需要的时候直接拿来用
//连接池：提前创建好一些连接，放在池子里面，需要的时候直接拿来用
//池化技术也是有缺点的 池化技术的缺点： 
//stl的空间配置器 分为 1级空间配置器 和 2级空间配置器
//一级空间配置器：就是malloc和free的封装，并且处理失败抛异常
//注意的是，默认情况下是没有设置这个函数指针句柄，也就是说默认情况下，一级空间配置器和 operator new是一样的

//申请内存x byte内存，看x对应映射位置的哈希桶中有没有内存对象，如果有就直接取走

//如果申请的内存不是8的整数倍怎么办 向8的整数倍对其就可以
//比如申请 1-8 字节 都是 8 字节
//申请9 - 16 字节 都是 16 字节